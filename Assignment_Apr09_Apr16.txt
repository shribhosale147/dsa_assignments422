*******************************************************************************************************************************
09-04-2022
*******************************************************************************************************************************
"Write a program to print the fibonacci numbers recursively till n
Output -> 0,1,1,2,3,5
Write a program to find the nth fiboanncii number. Ex - n -> 4
Output - 2
write a recursive function to compute the sum of a array  eg: input: [1,2,5,5,10] => o/p:  23"

*******************************************************************************************************************************
11-04-2022
*******************************************************************************************************************************
"""1.Given two arrays which are sorted in increasing order.
Find the Union of two arrays
A [3,5,6,8,9]
B [5,7,9]

Output - 3,5,6,8,9,7

2. Given an array of size N-1 such that it only contains distinct integers in the range of 1 to N. Find the missing element
https://practice.geeksforgeeks.org/problems/missing-number-in-array1416/1

3. Array Subset of another array 


Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. 
Both the arrays can be sorted or unsorted. It may be assumed that elements in both array are distinct.

https://practice.geeksforgeeks.org/problems/array-subset-of-another-array2317/1"""

public class hw_11_April {

	public static void main(String[] args) {
		
		
		int arr1[] = { 1, 2, 4, 5, 6 };
        int arr2[] = { 2, 3, 5, 7 };
        int m = arr1.length;
        int n = arr2.length;
        printUnion(arr1, arr2, m, n);
        
        
        int[] a = { 1, 2, 4, 5, 6 };
        System.out.println(findDisappearedNumbers(a));
        
        
        if (isSubset(arr1, arr2, m, n))
            System.out.print("arr2[] is "+ "subset of arr1[] ");
        else
            System.out.print("arr2[] is"+ "not a subset of arr1[]");

	}
	
	
	
	public static boolean isSubset(int arr1[],int arr2[],int m, int n)
	{
		int i = 0;
		int j = 0;
		for (i = 0; i < n; i++) {
			for (j = 0; j < m; j++)
				if (arr2[i] == arr1[j])
					break;

			if (j == m)
				return false;
		}


		return true;
	}
	public static int findDisappearedNumbers(int[] nums)
    {
        int n=nums.length;
        int sum=((n+1)*(n+2))/2;
        for(int i=0;i<n;i++)
          sum-=nums[i];
        return sum;
    }
	
	public static int printUnion(int arr1[], int arr2[], int m, int n)
    {
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (arr1[i] < arr2[j])
                System.out.print(arr1[i++] + " ");
            else if (arr2[j] < arr1[i])
                System.out.print(arr2[j++] + " ");
            else {
                System.out.print(arr2[j++] + " ");
                i++;
            }
        }
 
        
        while (i < m)
            System.out.print(arr1[i++] + " ");
        while (j < n)
            System.out.print(arr2[j++] + " ");
 
        return 0;
    }

}
*******************************************************************************************************************************
12-04-2022
*******************************************************************************************************************************
"1. Cyclically rotate an array n number of times
Time Complexity can be O(n2)

A[] = {1, 2, 3, 4, 5}
N = 1

Output; 5 1 2 3 4


A[] = {1, 2, 3, 4, 5}
N = 2

Output;  4 5 1 2 3 


A[] = {1, 2, 3, 4, 5}
N = 3

Output: 3 4 5 1 2



2. Search Insert Position 

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [1,3,5,6], target = 5
Output: 2


Input: nums = [1,3,5,6], target = 2
Output: 1

Input: nums = [1,3,5,6], target = 7
Output: 4

https://leetcode.com/problems/search-insert-position/description/"

import java.util.Arrays;

public class hw_12_April {
	
	
	
	static int arr[] = new int[]{1, 2, 3, 4, 5};
     
    
    public static void rotate()
    {
       int i = 0, j = arr.length - 1;
       while(i != j)
       {
         int temp = arr[i];
         arr[i] = arr[j];
         arr[j] = temp;
         i++;
       }
    }
    
    
    
    public static int searchInsert(int[] a , int target)
    {
        int n = a.length;
        for(int i = 0 ; i < n ; i++)
        {
            if(a[i] >= target)
                return i;
        }
        return n;
    }

    
    
    
    //*****************************************************************
	public static void main(String[] args) {
		
		System.out.println("Given Array is");
        System.out.println(Arrays.toString(arr));
         
        rotate();
         
        System.out.println("Rotated Array is");
        System.out.println(Arrays.toString(arr));
        
        
        int a[] = {1 , 3 , 5 , 7 , 9} , target = 8;
        System.out.println(searchInsert(a , target));

	}
	
	
	

}
*******************************************************************************************************************************
13-04-2022
*******************************************************************************************************************************
"1. Find the maximum element in each row and each column in a matrix
2. Search a sorted 2D Matrix
https://leetcode.com/problems/search-a-2d-matrix-ii/

3. Find the duplicate number

https://leetcode.com/problems/find-the-duplicate-number/

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 
Input: nums = [1,3,4,2,2]
Output: 2

Input: nums = [3,1,3,4,2]
Output: 3"

public class hw_13_April {

	public static void main(String[] args) {
		int[][] arr = new int[][] { {3, 4, 1, 8},
            {1, 4, 9, 11},
            {76, 34, 21, 1},
           {2, 1, 4, 5} };
           
           int t=4;
 
           	maxelement(4, arr);
           	
           	System.out.println(searchMatrix(arr,t));
           	
           	
           	int numRay[] = { 0, 4, 3, 2, 7, 8, 2, 3, 1 };
            
            for (int i = 0; i < numRay.length; i++) {
                numRay[numRay[i] % numRay.length]= numRay[numRay[i] % numRay.length]+ numRay.length;
            }
            System.out.println("The repeating elements are : ");
            for (int i = 0; i < numRay.length; i++) {
                if (numRay[i] >= numRay.length * 2) {
                    System.out.println(i + " ");
                }
            }
        

	}
	
	
	public static boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        int col = matrix[0].length;
        int l = 0;
        int r = row * col - 1;

        while(l <=r ){
            int mid = l + (r-l)/2;
            int val = matrix[mid/col][mid%col];
            if(val == target) return true;
            if(val > target){
                r = mid-1;
            }else{
                l = mid+1;
            }
        }

        return false;
    }
	
	 
    public static void maxelement(int no_of_rows, int[][] arr) {
        int i = 0;
         
       
        int max = 0;
        int[] result = new int[no_of_rows];
        while (i < no_of_rows) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] > max) {
                    max = arr[i][j];
                }
            }
            result[i] = max;
            max =0;
            i++;
 
        }
        printArray(result);
 
    }
 
    
    private static void printArray(int[] result) {
        for (int i =0; i<result.length;i++) {
            System.out.println(result[i]);
        }
 
    }

}
*******************************************************************************************************************************
14-04-2022
*******************************************************************************************************************************
"""1. Print the sum of the boundary elements and diagonal elements in a given matrix of size m and n

2. Print the prime numbers in the upper traingle of a 2D Matrix

public class hw_14_April {
	
	public static int N = 4;
    
    
    public static void diagonalBoundarySum(int arr[][]){
        int requiredSum = 0;
         
       
        for (int i = 0; i < N; i++) {
     
            
            for (int j = 0; j < N; j++) {
     
                
                if (i == j || (i + j) == N - 1) {
                    requiredSum += arr[i][j];
                }
     
               
                else if (i == 0 || j == 0 || i == N - 1|| j == N - 1) {
                    requiredSum += arr[i][j];
                }
            }
        }
     
        System.out.println(requiredSum);
    }

    
    
	public static void main(String[] args) {
		int arr[][] = { 
				{ 1, 2, 3, 4 },
				{ 1, 2, 3, 4 },
                { 1, 2, 3, 4 },
                { 1, 2, 3, 4 } };

			diagonalBoundarySum(arr);
	}

}
*******************************************************************************************************************************
15-04-2022
*******************************************************************************************************************************
" 1. Rotate a matrix in place by Anti-Clockwise by n times
 
 If n = 1,
 
 1  2  3
 4  5  6
 7  8  9
 
 
 Output:
 3  6  9 
 2  5  8 
 1  4  7 
 
 
 
 If n = 2,
 
 1  2  3
 4  5  6
 7  8  9
 
 9 8 7 
 6 5 4 
 3 2 1
 
 
 2. Find the number of rows which is sorted in increasing order in a given matrix
 
int a[][] = { { 1, 2, 3, 4 }, { 4, 6, 7, 1 }, { 2, 3, 7, 9 }, { 7, 12, 15, 7 } };

Count : 2

Explaination -> row 0 and row 2 are sorted in increasing order"


public class hw_15_April {

	public static void main(String[] args) {
		int N = 4;
		 
       
        int mat[][] = {
            { 1, 2, 3, 4 },
            { 5, 6, 7, 8 },
            { 9, 10, 11, 12 },
            { 13, 14, 15, 16 }
        };
        
        

        // displayMatrix(mat);
 
        rotateMatrix(N, mat);
 
        // Print rotated matrix
        displayMatrix(N, mat);
	}
	
	public static void rotateMatrix(int N, int mat[][])
	    {
	       
	        for (int x = 0; x < N / 2; x++) {
	           
	            for (int y = x; y < N - x - 1; y++) {
	               
	                int temp = mat[x][y];
	 
	                mat[x][y] = mat[y][N - 1 - x];
	 
	                mat[y][N - 1 - x]
	                    = mat[N - 1 - x][N - 1 - y];
	 
	                mat[N - 1 - x][N - 1 - y] = mat[N - 1 - y][x];
	 
	               mat[N - 1 - y][x] = temp;
	            }
	        }
	    }
	 
	    
	    static void displayMatrix(
	        int N, int mat[][])
	    {
	        for (int i = 0; i < N; i++) {
	            for (int j = 0; j < N; j++)
	                System.out.print(" " + mat[i][j]);
	 
	            System.out.print("\n");
	        }
	        System.out.print("\n");
	    }
	 

}

*******************************************************************************************************************************
16-04-2022
*******************************************************************************************************************************
"Solve the programs using recursion -
1. Find the maximum number in an array
a[] = { 3,5,7,1,0};

Output - 7

2. Find the sum of all numbers in an array
3. Print the negative numbers in an array
4. Print the reverse of a number"
public class hw_16_April {

	public static void main(String[] args) {
		int [] A=  { 3,5,7,1,0,1,2,-2,-1,-3};
		int i = A.length;
		int m=0;
		int sum=0;
		
       // System.out.println(maxElement(A, i));
       sumElement(A, i,sum,m);
       
       negativeNumbers(A,i, m);
       
       int n=1234;
	    
	    print(n);


	}
	
	public static void print(int n)
	{
	   if(n<10){
		   System.out.println(n);
		   return;
	         
	         
	   }   
	   else{
		  
		   System.out.print(n%10);
		   print(n/10);
	      
	         
	   }
	   
	   
}
	private static void negativeNumbers(int[] a,int i,int m) {
		if(i==m) {
			return;
		}
		else {
			if(a[m]<0)
			System.out.println(a[m]+" ");
			m++;
			negativeNumbers(a,i, m);
			
		}
	}


	private static void sumElement(int[] a, int i,int sum,int m) {
		
		if(i==m) {
			System.out.println(sum);
			return;
		}else {
			sum=sum+a[m];
			m++;
			sumElement(a,i,sum,m);
		}
		
		
	}


	public static int maxElement(int []A,int i) {
		
		if(i == 1)
	        return A[0];
	         
	        return Math.max(A[i-1], maxElement(A, i-1));
		
	}

}
